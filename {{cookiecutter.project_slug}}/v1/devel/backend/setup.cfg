[metadata]

{%- set license_classifiers = {
    'MIT license': 'License :: OSI Approved :: MIT License',
    'BSD license': 'License :: OSI Approved :: BSD License',
    'ISC license': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
    'GNU General Public License v3': 'License :: OSI Approved :: GNU General
Public License v3 (GPLv3)'
} %}

{%- set github_project = 'https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}' %}

name = {{ cookiecutter.project_slug }}
version = attr: server.metadata.version
license = MIT 

author = {{ cookiecutter.full_name }}
author_email= {{ cookiecutter.email }}

description= {{ cookiecutter.project_short_description }}
long_description = file: README

url = https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}} 
project_urls = 
    Source Code = https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}} 
    Issue Tracker = https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}/tracker

classifiers = 
    Programming Language :: Python :: 3
{%- if cookiecutter.open_source_license in license_classifiers %}
    {{ license_classifiers[cookiecutter.open_source_license] }}
{%- endif %}
    Operating System :: OS Independent

[options]
package_dir =
    = src
zip_safe = False

packages = find_namespace:

install_requires=
    pytz
    dateutils
    eventlet
    requests
    bcrypt
    flask
    psycopg2-binary
    sqlalchemy
    Flask-SQLAlchemy
    flask-compress
    flask-script
    flask-migrate
    flask-bcrypt
    flask-jwt-extended
    flask-socketio
    flask-restful
    flask-mail
    flask-flatpages
    coverage
    PyJWT
    cryptography
    itsdangerous
    docutils

[options.package_data]
server  = 
    migrations/*
    migrations/versions/*
    templates/*
    routes/templates/auth/*
    routes/templates/api/*
    static/js/*
    static/media/*
    static/css/*

[options.packages.find]
where = src

[options.entry_points]
console_scripts =
    server-cmd = server.commands:cli
    server-launch = server.commands:launch
